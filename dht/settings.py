"""
Django settings for dht project.

Generated by 'django-admin startproject' using Django 1.9.9.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
from zen.common import environment, config as conf

conf.load(os.path.join(environment.ETC_DIRECTORY, "kt", "dht", "zen.conf"))


dbEngine = "django.db.backends.postgresql_psycopg2"
dbName = conf.get("coordinator", "DB_NAME")
dbHost = conf.get("coordinator", "DB_HOST")
dbPort = conf.get("coordinator", "DB_PORT")
dbUser = conf.get("coordinator", "DB_USER")
dbPass = conf.get("coordinator", "DB_PASS")

DBENGINE = {
    "postgres": "postgres",
    "postgresql": "postgres",
    "mariadb": "maria",
    "maria": "maria",
    "mysql": "maria",
}.get("postgres", "postgres")

USE_DHCP = conf.get_int_val("common", "DHCP", 1)
USE_RADIUS = conf.get_int_val("common", "RADIUS", 1)
USE_DMS = conf.get_int_val("common", "DNS", 1)
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "hm40wq!wm+jw=6g0t83+k-^1cmnyh&nyienph_tk5mlt-ho+ey"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "zen.rpc4django",
    "captcha",
    "control",
]

# MIDDLEWARE = [
#     'django.middleware.security.SecurityMiddleware',
#     # 'django.contrib.sessions.middleware.SessionMiddleware',
#     'django.middleware.common.CommonMiddleware',
#     # 'django.middleware.csrf.CsrfViewMiddleware',
#     'django.contrib.auth.middleware.AuthenticationMiddleware',
#     'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
#     'django.contrib.messages.middleware.MessageMiddleware',
#     'django.middleware.clickjacking.XFrameOptionsMiddleware',
# ]
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    # 'django.middleware.csrf.CsrfViewMiddleware',
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "dht.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "template")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "dht.wsgi.application"


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }

DATABASES = {
    "default": {
        "ENGINE": dbEngine,
        "NAME": dbName,
        "USER": dbUser,
        "PASSWORD": dbPass,
        "HOST": dbHost,
        "PORT": dbPort,
        "CONN_MAX_AGE": 300,  # the maximum lifetime of a connection in secs
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = "/static/"

STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]

PGPOOL_HOSTS = []
PCP_PORT = None


if DBENGINE == "maria":
    DATABASES["default"]["OPTIONS"] = {"charset": "utf8"}
else:
    try:
        pgpoolConfig = {}
        pgpool_hosts_count = 0
        with open("/usr/local/etc/pgpool.conf", "rt", encoding="utf8") as f:
            for line in f:
                line = line.split("#", 1)[0].strip()
                if not line:
                    continue

                try:
                    k, v = line.split("=", 1)
                except:
                    pass
                else:
                    k = k.strip()
                    if k.startswith("backend_hostname"):
                        pgpool_hosts_count += 1
                    pgpoolConfig[k] = v.strip().replace("'", "")

        PCP_PORT = pgpoolConfig["pcp_port"]
        user = pgpoolConfig.get("health_check_user")
        password = pgpoolConfig.get("health_check_password")
        db_name = "postgres"
        for idx in range(pgpool_hosts_count):
            hostname = pgpoolConfig.get("backend_hostname%d" % idx)
            port = pgpoolConfig.get("backend_port%d" % idx)
            DATABASES[hostname] = {
                "ENGINE": dbEngine,
                "NAME": db_name,
                "USER": user,
                "PASSWORD": password,
                "HOST": hostname,
                "PORT": port,
            }
            PGPOOL_HOSTS.append(
                {
                    "id": idx,
                    "name": hostname,
                    "port": port,
                    "user": user,
                    "password": password,
                }
            )
    except:
        pass
# EOF
